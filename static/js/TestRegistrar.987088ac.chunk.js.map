{"version":3,"file":"static/js/TestRegistrar.987088ac.chunk.js","mappings":"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","sources":["graphql/localQueries.js","routes/TestRegistrar.js","../node_modules/@apollo/src/react/components/Mutation.tsx","../node_modules/@apollo/src/react/components/Query.tsx","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["import { gql } from '@apollo/client'\n\nexport const GET_WEB3 = gql`\n  query getweb3 @client {\n    accounts\n    isReadOnly\n  }\n`\n","import React, { Fragment, Component } from 'react'\nimport { Query, Mutation } from '@apollo/client/react/components'\nimport { gql } from '@apollo/client'\nimport { GET_WEB3 } from '../graphql/localQueries'\n\nconst GET_PENDING_TRANSACTIONS = gql`\n  query getPendingTransations {\n    pendingTransactions @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst GET_TRANSACTION_HISTORY = gql`\n  query getTransactionHistory {\n    transactionHistory @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst REGISTER_DOMAIN = gql`\n  mutation registerTestDomain($name: String!) {\n    registerTestDomain(name: $name) @client {\n      id\n    }\n  }\n`\n\nconst RegisterSubdomain = ({ setTx }) => {\n  let input\n\n  return (\n    <Mutation mutation={REGISTER_DOMAIN}>\n      {registerTestDomain => (\n        <div>\n          <form\n            onSubmit={e => {\n              e.preventDefault()\n              registerTestDomain({ variables: { name: input.value } }).then(\n                txId => {\n                  console.log(txId)\n                }\n              )\n              input.value = ''\n            }}\n          >\n            <input\n              ref={node => {\n                input = node\n              }}\n            />\n            <button type=\"submit\">Register subdomain</button>\n          </form>\n        </div>\n      )}\n    </Mutation>\n  )\n}\n\nclass TestRegistrar extends Component {\n  state = {\n    started: false\n  }\n  render() {\n    return (\n      <Fragment>\n        <Query query={GET_WEB3} pollInterval={500}>\n          {({ loading, error, data }) => {\n            if (loading) return <div>Loading web3</div>\n            const { web3, people } = data\n            console.log(data)\n            return (\n              <Fragment>\n                <div>\n                  {web3.accounts.length > 0\n                    ? `Your ETH address is ${web3.accounts[0]}`\n                    : 'Unlock metamask!'}\n                </div>\n                <div>{console.log(people)}</div>\n                <RegisterSubdomain />\n              </Fragment>\n            )\n          }}\n        </Query>\n        <Query query={GET_PENDING_TRANSACTIONS}>\n          {({ data, loading }) => {\n            const { pendingTransactions } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Pending Transactions</h2>\n                {pendingTransactions.map(tx => (\n                  <li tx={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n        <Query query={GET_TRANSACTION_HISTORY}>\n          {({ data, loading }) => {\n            const { transactionHistory } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Transaction History</h2>\n                {transactionHistory.map(tx => (\n                  <li key={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default TestRegistrar\n","import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { MutationComponentOptions } from './types';\nimport { useMutation } from '../hooks';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport interface Mutation<TData, TVariables> {\n  propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\n}\n\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    ),\n    PropTypes.func\n  ]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string,\n} as Mutation<any, any>[\"propTypes\"];\n","import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { QueryComponentOptions } from './types';\nimport { useQuery } from '../hooks';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result as any) : null;\n}\n\nexport interface Query<TData, TVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n} as Query<any, any>[\"propTypes\"];\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["GET_WEB3","gql","GET_PENDING_TRANSACTIONS","GET_TRANSACTION_HISTORY","REGISTER_DOMAIN","RegisterSubdomain","input","setTx","Mutation","mutation","registerTestDomain","onSubmit","e","preventDefault","variables","name","value","then","txId","console","log","ref","node","type","TestRegistrar","state","started","Fragment","Query","query","pollInterval","loading","data","error","web3","people","accounts","length","pendingTransactions","map","tx","id","href","transactionHistory","Component","props","useMutation","runMutation","result","children","propTypes","PropTypes","optimisticResponse","refetchQueries","awaitRefetchQueries","update","onCompleted","onError","fetchPolicy","options","useQuery","client","notifyOnNetworkStatusChange","ssr","partialRefetch","returnPartialData","useApolloClient","verifyDocumentType","DocumentType","useState","called","setResult","useRef","mutationId","isMounted","Object","assign","current","execute","useCallback","executeOptions","baseOptions","ignoreResults","clientOptions","mergeOptions","mutate","response","errors","ApolloError","graphQLErrors","result_1","equal","_a","_b","result_2","reset","useEffect","__assign"],"sourceRoot":""}